# Итоговая сводка обучения модели YOLO для детекции объектов

Общее время, затраченное на проект, составило около 8 часов. Примерное распределение: 3 часа на работу с датасетом, 3 часа на обучение модели и 2 часа на ознакомление с задачей, вопросы, формирование документации, выгрузку и другие задачи.

Разметка датасета производилась с помощью Roboflow с использованием auto-labeling, где задача была сведена к исправлению bounding box'ов и указанию классов. Из исходных видео были вырезаны кадры с определённым шагом, после чего были размечены 12 классов: ['borsh', 'chicken', 'cup', 'cutlery', 'empty cup', 'empty plate', 'meat', 'salad', 'salad balsamic', 'shot', 'soup', 'teapot']. Всего размечено 78 изображений, на основе которых аугментировано 198 изображений, распределённых между train, test и val наборами.

## Параметры обучения и причины выбора

- **Первая версия (`train.py`)**:
  - Модель: `yolo11n.pt`, `imgsz=640`, `batch=16`, оптимизатор SGD.
  - Причины: Базовая конфигурация для быстрого старта, подходит для начального анализа данных на RTX 3090.
  - Результаты: mAP50=0.87509, mAP50-95=0.87509, train/cls_loss (3.9841 → 0.19959), train/box_loss (0.9785 → 0.17949), время 81.427 с.

- **Вторая версия (`train1.py`)**:
  - Модель: `yolo11n.pt`, `imgsz=640`, `batch=16`, оптимизатор AdamW, аугментации (mosaic=0.7, hsv_h=0.05 и т.д.).
  - Причины: Улучшение классификации за счёт AdamW и умеренных аугментаций для разнообразия данных.
  - Результаты: mAP50=0.9475, mAP50-95=0.87164, train/cls_loss (3.52578 → 0.16232), train/box_loss (0.88221 → 0.17949), время 81.427 с.

- **Третья версия (`train2.py`)**:
  - Модель: `yolo11s.pt`, `imgsz=960`, `batch=8`, оптимизатор SGD, `mosaic=0.5`.
  - Причины: Увеличение разрешения и переход на более мощную модель для улучшения локализации мелких объектов, снижение аугментаций для фокуса на точности.
  - Результаты: mAP50=0.95736, mAP50-95=0.8853, train/cls_loss (3.87127 → 0.07402), train/box_loss (0.92261 → 0.07204), время 238.35 с.


- **mAP50**: Рост от 0.87509 (1-я версия) до 0.9475 (2-я версия) и 0.95736 (3-я версия) показывает прогресс в точности при IoU=0.5.
- **mAP50-95**: Увеличение от 0.87509 (1-я версия) до 0.87164 (2-я версия) и 0.8853 (3-я версия) указывает на улучшение локализации, особенно в 3-й версии.
- **Precision и Recall**: Все версии достигли высоких значений (~0.97 и ~0.95 соответственно к 100 эпохам), с пиком в 3-й версии (0.98162 и 0.94792).
- **Потери**: train/cls_loss и train/box_loss стабильно снижались, с наилучшими значениями в 3-й версии (0.07402 и 0.07204), хотя val/cls_loss (0.35486) выше, чем train/cls_loss, что может указывать на лёгкое переобучение.

## Анализ ошибок и выводы

- **Ошибки**: В некоторых сценах наблюдаются перекрытия bounding box, особенно в 1-й и 2-й версиях. 3-я версия улучшила локализацию, но требует дальнейшей оптимизации.
- **Выводы**: 
  - 3-я версия (YOLOv11s, imgsz=960) оптимальна для точности (mAP50-95=0.8853) и локализации, но увеличивает время обучения.
  - 2-я версия (AdamW, аугментации) лучше по скорости и классификации (mAP50=0.9475), подходит для ограниченных ресурсов.
  - 1-я версия базовая, уступает по всем метрикам.

## Графики метрик для первой версии train

![График результатов train.py](/home/r0yaltyy/sobes/runs/detect/train/results.png)

## Графики метрик для второй версии train (train1)

![График результатов train1.py](/home/r0yaltyy/sobes/runs/detect/train1/results.png)

## Графики метрик для третьей версии train (train2)

![График результатов train2.py](/home/r0yaltyy/sobes/runs/detect/train2/results.png)
